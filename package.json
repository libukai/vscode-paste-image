{
  "name": "vscode-paste-image",
  "displayName": "Paste Image",
  "description": "Paste image from clipboard directly with modern TypeScript implementation",
  "version": "2.0.0",
  "publisher": "mushan",
  "author": {
    "name": "mushan",
    "email": "mushanmail@126.com"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/mushanshitiancai/vscode-paste-image.git"
  },
  "homepage": "https://github.com/mushanshitiancai/vscode-paste-image/blob/master/README.md",
  "bugs": {
    "url": "https://github.com/mushanshitiancai/vscode-paste-image/issues"
  },
  "icon": "res/icon.png",
  "galleryBanner": {
    "color": "#252526",
    "theme": "dark"
  },
  "keywords": [
    "paste",
    "image",
    "markdown",
    "paste image",
    "keybindings",
    "clipboard",
    "asciidoc"
  ],
  "engines": {
    "vscode": "^1.75.0"
  },
  "categories": [
    "Other"
  ],
  "main": "./out/extension.js",
  "contributes": {
    "configuration": {
      "type": "object",
      "title": "Paste Image Configuration",
      "properties": {
        "pasteImage.path": {
          "type": "string",
          "default": "${currentFileDir}",
          "description": "The destination to save image file. You can use variables ${currentFileDir} and ${workspaceRoot}.",
          "markdownDescription": "The destination to save image file. You can use variables:\n- `${currentFileDir}`: Current file's directory\n- `${workspaceRoot}`: Workspace root directory"
        },
        "pasteImage.basePath": {
          "type": "string",
          "default": "${currentFileDir}",
          "description": "The base path for image URL generation. Leave empty for absolute paths.",
          "markdownDescription": "The base path for image URL generation. You can use variables:\n- `${currentFileDir}`: Current file's directory\n- `${workspaceRoot}`: Workspace root directory\n- Leave empty for absolute paths"
        },
        "pasteImage.forceUnixStyleSeparator": {
          "type": "boolean",
          "default": true,
          "description": "Force Unix-style path separators (/) regardless of OS"
        },
        "pasteImage.prefix": {
          "type": "string",
          "default": "",
          "description": "String to prepend to the resolved image path"
        },
        "pasteImage.suffix": {
          "type": "string",
          "default": "",
          "description": "String to append to the resolved image path"
        },
        "pasteImage.defaultName": {
          "type": "string",
          "default": "YYYY-MM-DD-HH-mm-ss",
          "description": "Default image file name pattern using date-fns format tokens",
          "markdownDescription": "Default image file name pattern. Uses [date-fns format tokens](https://date-fns.org/docs/format):\n- `YYYY`: 4-digit year\n- `MM`: 2-digit month\n- `DD`: 2-digit day\n- `HH`: 24-hour format hour\n- `mm`: minutes\n- `ss`: seconds"
        },
        "pasteImage.namePrefix": {
          "type": "string",
          "default": "",
          "description": "String to prepend to the image file name"
        },
        "pasteImage.nameSuffix": {
          "type": "string",
          "default": "",
          "description": "String to append to the image file name"
        },
        "pasteImage.encodePath": {
          "type": "string",
          "enum": [
            "none",
            "urlEncode",
            "urlEncodeSpace"
          ],
          "default": "urlEncodeSpace",
          "description": "How to encode the image path",
          "enumDescriptions": [
            "No encoding",
            "Full URL encoding",
            "Encode spaces only"
          ]
        },
        "pasteImage.insertPattern": {
          "type": "string",
          "default": "${imageSyntaxPrefix}${imageFilePath}${imageSyntaxSuffix}",
          "description": "Pattern for inserting image references",
          "markdownDescription": "Pattern for inserting image references. Available variables:\n- `${imageSyntaxPrefix}`: Language-specific prefix (e.g., `![](` for Markdown)\n- `${imageSyntaxSuffix}`: Language-specific suffix (e.g., `)` for Markdown)\n- `${imageFilePath}`: The processed image file path\n- `${imageFileName}`: Image file name only\n- `${imageFileNameWithoutExt}`: Image file name without extension"
        },
        "pasteImage.showFilePathConfirmInputBox": {
          "type": "boolean",
          "default": false,
          "description": "Show input box to confirm/modify file path before saving"
        },
        "pasteImage.filePathConfirmInputBoxMode": {
          "type": "string",
          "enum": [
            "fullPath",
            "onlyName"
          ],
          "default": "fullPath",
          "description": "What to show in the confirmation input box",
          "enumDescriptions": [
            "Show full file path",
            "Show file name only"
          ]
        },
        "pasteImage.imageFormat": {
          "type": "string",
          "enum": [
            "png",
            "jpg",
            "webp"
          ],
          "default": "png",
          "description": "Image format for saved files",
          "enumDescriptions": [
            "PNG format (lossless)",
            "JPEG format (lossy, smaller)",
            "WebP format (modern, efficient)"
          ]
        },
        "pasteImage.jpegQuality": {
          "type": "number",
          "default": 85,
          "minimum": 1,
          "maximum": 100,
          "description": "JPEG quality (1-100, only for JPEG format)"
        }
      }
    },
    "commands": [
      {
        "command": "extension.pasteImage",
        "title": "Paste Image",
        "category": "Paste Image"
      }
    ],
    "keybindings": [
      {
        "command": "extension.pasteImage",
        "key": "ctrl+alt+v",
        "mac": "cmd+alt+v",
        "when": "editorTextFocus"
      }
    ]
  },
  "scripts": {
    "vscode:prepublish": "npm run build",
    "build": "tsc -p ./",
    "watch": "tsc -watch -p ./",
    "pretest": "npm run build && npm run lint",
    "test": "jest",
    "test:coverage": "jest --coverage",
    "lint": "eslint src --ext ts",
    "lint:fix": "eslint src --ext ts --fix",
    "format": "prettier --write \"src/**/*.ts\"",
    "format:check": "prettier --check \"src/**/*.ts\"",
    "package": "vsce package",
    "clean": "rimraf out"
  },
  "dependencies": {
    "clipboardy": "^3.0.0",
    "date-fns": "^2.29.3",
    "fs-extra": "^11.1.1"
  },
  "devDependencies": {
    "@types/fs-extra": "^11.0.1",
    "@types/jest": "^29.5.5",
    "@types/node": "18.x",
    "@types/vscode": "^1.74.0",
    "@typescript-eslint/eslint-plugin": "^6.7.4",
    "@typescript-eslint/parser": "^6.7.4",
    "@vscode/test-electron": "^2.3.4",
    "@vscode/vsce": "^2.21.1",
    "eslint": "^8.50.0",
    "eslint-config-prettier": "^9.0.0",
    "eslint-plugin-prettier": "^5.0.0",
    "jest": "^29.7.0",
    "prettier": "^3.0.3",
    "rimraf": "^5.0.5",
    "ts-jest": "^29.1.1",
    "typescript": "^5.2.2"
  }
}